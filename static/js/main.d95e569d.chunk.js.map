{"version":3,"sources":["algorithm/index.js","App.js","reportWebVitals.js","index.js"],"names":["TSP","matrix","path","len","console","log","this","length","key","mstSet","min_index","min","Infinity","v","parent","graph","res","nodes","links","forEach","_","index","push","id","toString","i","source","target","count","u","minKey","_returnResult","n","myConfig","nodeHighlightBehavior","node","color","size","highlightStrokeColor","link","highlightColor","initialMatrix","App","useState","setMatrix","initialSchema","setInitialSchema","schema","setSchema","minPath","setMinPath","useEffect","tsp","solve","newInitSchema","j","className","map","r","el","TextField","value","disabled","onChange","e","m","Number","handleChange","data","config","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d95e569d.chunk.js","sourcesContent":["class TSP {\n  matrix = [];\n  path = 0;\n  len = 0;\n\n  constructor(matrix) {\n    console.log(matrix)\n    this.matrix = matrix;\n    this.len = matrix.length;\n  }\n\n  get getMatrix() {\n    return this.matrix;\n  }\n\n  minKey(key, mstSet) {\n    let min = Infinity, min_index;  \n  \n    for (let v = 0; v < this.len; v++) {\n      if (mstSet[v] === false && key[v] < min) {\n        min = key[v];\n        min_index = v;\n      }\n    }\n    return min_index;  \n  } \n\n  static toString(n) {\n    return (n + 1).toString()\n  }\n\n  _returnResult(parent, graph) {  \n    const res = {\n      nodes: [],\n      links: []\n    };\n\n    parent.forEach((_,index) => {\n      res.nodes.push({ id: TSP.toString(index) });\n    });\n\n    for (let i = 1; i < graph.length; i++) {\n      console.log(parent[i], \" - \", i, \" \\t\", graph[i][parent[i]],\" \\n\");\n      this.path += graph[i][parent[i]]; \n      \n      res.links.push({ source: TSP.toString(parent[i]), target: TSP.toString(i) });\n    } \n\n    return res;\n  }  \n\n  solve() {\n    const parent = [];  \n    const key = [];    \n    const mstSet = [];  \n\n    for (let i = 0; i < this.len; i++) { \n      key[i] = Infinity;\n      mstSet[i] = false;\n    }  \n    \n    key[0] = 0;  \n    parent[0] = -1; \n\n    for (let count = 0; count < this.len - 1; count++) {    \n      let u = this.minKey(key, mstSet);  \n      mstSet[u] = true;  \n  \n      for (let v = 0; v < this.len; v++) {\n        if (this.matrix[u][v] && mstSet[v] === false && this.matrix[u][v] < key[v]) {\n          parent[v] = u;\n          key[v] = this.matrix[u][v];\n        }\n      }\n    }  \n    \n    return this._returnResult(parent, this.matrix);  \n  }  \n\n}\n\nexport default TSP;\n","import { useEffect, useState } from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport TextField from '@material-ui/core/TextField';\n\nimport TSP from './algorithm';\n\nimport './App.css';\n \nconst myConfig = {\n    nodeHighlightBehavior: true,\n    node: {\n        color: \"green\",\n        size: 300,\n        highlightStrokeColor: \"red\",\n    },\n    link: {\n        highlightColor: \"lightblue\",\n    },\n};\n\n\nconst initialMatrix = [\n  [0, 2, 7, 0, 0, 0, 0],\n  [2, 0, 0, 3, 3, 4, 0],\n  [7, 0, 0, 1, 0, 0, 0],\n  [0, 3, 7, 0, 5, 1, 0],\n  [0, 3, 0, 5, 0, 0, 5],\n  [0, 4, 0, 1, 0, 0, 2],\n  [0, 0, 0, 0, 5, 2, 0]\n];\n\nfunction App() { \n  const [matrix, setMatrix] = useState(initialMatrix);\n  const [initialSchema, setInitialSchema] = useState(null); \n  const [schema, setSchema] = useState(null);\n  const [minPath, setMinPath] = useState(null);\n\n  useEffect(() => {\n    const tsp = new TSP(matrix);\n    setSchema(tsp.solve());\n    setMinPath(tsp.path);\n\n    const newInitSchema = {\n      nodes: [],\n      links: []\n    };\n\n    for (let i = 0; i < matrix.length; i++) {\n      newInitSchema.nodes.push({ id: TSP.toString(i) });\n    }\n\n    for (let i = 0; i < matrix.length; i++) {\n      for (let j = 0; j < matrix.length; j++) {\n        if (matrix[i][j] > 0) {\n          newInitSchema.links.push({ source: TSP.toString(i), target: TSP.toString(j) });\n        }\n      }\n    }\n\n    setInitialSchema(newInitSchema);\n  }, [matrix]);\n\n  const handleChange = (e, i, j) => {\n    const m = [...matrix];\n    m[i][j] = Number(e.target.value);\n    setMatrix(m);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"form-container\">\n        <h2>Матриця</h2>\n        {\n          matrix.map((r, i) => (\n            <div key={i}>\n              {r.map((el, index) =>\n                <TextField\n                  key={index}\n                  value={el}\n                  disabled={i === index}\n                  onChange={(e) => handleChange(e, i, index)}\n                  />\n              )}\n            </div>\n          ))\n        }\n      </div>\n      <div className=\"container\">\n        <section>\n          <h2>Початковий граф</h2>\n          {initialSchema && (\n            <Graph\n              id=\"graph-id-0\"\n              data={initialSchema}\n              config={myConfig}\n            />\n          )}\n        </section>\n        <section>\n          {minPath && <h2>Мінімальний шлях = {minPath}</h2>}\n          {schema && (\n            <Graph\n              id=\"graph-id-1\"\n              data={schema}\n              config={myConfig}\n            />\n          )}\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}